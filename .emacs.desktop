;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Fri Dec 12 22:52:17 2014
;; Desktop file format version 206
;; Emacs version 24.3.1

;; Global section:
(setq comint-input-ring nil)
(setq compile-history nil)
(setq desktop-missing-file-warning nil)
(setq extended-command-history '("flyspell-mode" "ispell" "flyspell-mode" "ispell" "shell" "ispell" "flyspell-mode" "shell" "tuareg-mode" "comment-region"))
(setq face-name-history '("default"))
(setq file-name-history '("/Users/tan/.emacs.d/lisp/init-local.el" "/Users/tan/.emacs.d/init.el" "/Users/tan/GitHub/ppl2015/ppl2015-tanki.tex" "/Users/tan/GitHub/ppl001/file2" "/Users/tan/GitHub/ppl2015_test/file2" "/Users/tan/GitHub/ppl2015_test/file1" "/Users/tan/.emacs.d/custom.el" "/Users/tan/GitHub/ppl2015/jssst_ppl.cls" "/Users/tan/GitHub/ppl2015/template.tex" "~/GitHub/ppl2015/jssst_ppl.cls" "~/GitHub/ppl2015/template.tex" "~/GitHub/PLDI-abstract/pldi abstract.tex" "/Users/tan/GitHub/PLDI-abstract/sigplanconf.cls" "/Users/tan/GitHub/PLDI-abstract/tan.bib" "/Users/tan/GitHub/PLDI-abstract/pldi abstract.tex" "/Users/tan/GitHub/hello-world/Syntax Semantics Typing.tex" "/Users/tan/Desktop/a" "/Users/tan/GitHub/spin/veri_okn3.pml" "/Users/tan/Apts/CPAchecker/testfiles" "/Users/tan/Test/cpachecker/test.c" "/Users/tan/Desktop/prs/2014-11-19/ex/veri_okn3.pml" "/Users/tan/Test/tapas/billben.actl" "/Users/tan/Test/spin/veri_okn3.pml" "/Users/tan/Apts/CPAchecker/output/Statistics.txt" "~/Test/cpachecker/test.c" "~/apts/CPAchecker/config/predicateAnalysis-as-bitprecise-cex-check.properties" "~/GitHub/spin/veri_okn3.pml" "~/apts/Spin/iSpin/ispin.tcl" "/Users/tan/Test/spin/test.pml" "~/Test/spin/veri_okn2.pml" "~/Test/spin/train.pml" "/Users/tan/Test/spin/veri_okn2.pml" "/Users/tan/Test/spin/veri_okn2.pml.trail" "/Users/tan/Test/spin/veri_okn.pml" "/Users/tan/Test/spin/train.pml" "~/Test/spin/lynch.plm" "~/Test/spin/type_infer.plm" "/Users/tan/GitHub/presentation/safe-memory-20141008/20141008.tex" "/Users/tan/Test/spin/type_infer.plm" "/Users/tan/Test/spin/lynch" "/Users/tan/Test/spin/lynch.plm" "~/Test/spin/lynch" "~/GitHub/hello-world/Syntax Semantics Typing.tex" "/Users/tan/GitHub/presentation/safe-memory-20140728/20140728.tex" "/Users/tan/Test/testforOcaml/bmodule.cmi" "/Users/tan/Test/testforOcaml/amodule.mli" "/Users/tan/Test/testforOcaml/bmodule.ml" "/Users/tan/Test/testforOcaml/bmodule.mli" "/Users/tan/Test/testforOcaml/amodule.ml" "/Users/tan/Test/testforOcaml/bmoudle.ml" "/Users/tan/Test/testforOcaml/amoudle.ml" "~/Google ‘ÔÆ‘¶Ë‘Ó²‘ÅÌ/‘ÎÄ‘µµ/‘ÐÂ‘½¨‘ÎÄ‘±¾‘ÎÄ‘µµ.txt" "~/Spin/iSpin/xspin.tcl" "/Users/tan/Documents/Developing-with-Ocaml/Chapters/chap2.pdf" "~/Downloads/ispin.tcl" "/Users/tan/Spin/Examples/README_tests.txt" "/Users/tan/.bashrc" "/etc/bashrc" "/Users/tan/.emacs.d/lisp/init-local.el" "~/.bash_history" "/Users/tan/.emacs.d/README.md" "/Users/tan/.bash_history" "/Users/tan/.emacs.d/lisp/init-lisp.el" "/Users/tan/.emacs.d/lisp/init-locales.el" "/Users/tan/.emacs.d/lisp/init-auto-complete.el" "/Users/tan/.emacs.d/init.el" "~/Music/sss/140522FatPolarBears" "/Users/tan/Music/sss/twitter-opinion" "/Users/tan/Music/sss/140522FatPolarBears" "~/Music/sss/twitter-opinion" "~/Google ‘ÔÆ‘¶Ë‘Ó²‘ÅÌ/‘¼Ç‘Â¼.txt" "/Users/tan/docs/presentation/safe memory20140421/20140421.tex"))
(setq grep-find-history nil)
(setq grep-history nil)
(setq ido-buffer-history '("init.el" "init-local.el" "ppl2015-tanki.tex" "*shell*" "*tex-shell*" "file2" "file1" "custom.el" "*Custom Themes*" "*Custom Theme*" "jssst_ppl.cls" "template.tex" "*ocaml-toplevel*" "*scratch*" "pldi abstract.tex" "Syntax Semantics Typing.tex" " *undo-tree*" "sigplanconf.cls" "tan.bib" "veri_okn3.pml" "testfiles" "test.c" "billben.actl" "Statistics.txt" "predicateAnalysis-as-bitprecise-cex-check.properties" "test.pml" "*Messages*" "veri_okn2.pml" "train.pml" "veri_okn2.pml.trail" "veri_okn.pml" "20141008.tex" "lynch.plm" "type_infer.plm" "*Ibuffer*" "lynch" "20140728.tex" "*Completions*" "amodule.ml" "bmodule.ml" "amodule.mli" "bmodule.cmi" "bmodule.mli" "bmoudle.ml" "‘ÐÂ‘½¨‘ÎÄ‘±¾‘ÎÄ‘µµ.txt" "amoudle.ml" "xspin.tcl"))
(setq ido-last-directory-list '(("/Users/tan/Desktop/prs/2014-11-19/" . "ex/") ("/Users/tan/Desktop/prs/" . "2014-11-19/") ("/Users/tan/Desktop/" . "prs/") ("/Users/tan/GitHub/presentation/" . "safe-memory-20140728/") ("/Users/tan/Documents/Developing-with-Ocaml/" . "Chapters/") ("/Users/tan/Documents/" . "Developing-with-Ocaml/") ("/Users/tan/Music/" . "sss/") ("/System/Library/" . "LaunchDaemons/") ("/System/" . "Library/") ("/Users/tan/.emacs.d/" . "lisp/") ("/Users/tan/docs/presentation/" . "safe memory20140421/") ("/Users/tan/docs/" . "presentation/") ("/Users/tan/GitHub/" . "ppl2015/") ("/Users/tan/Test/" . "cpachecker/") ("/Users/tan/Programs/" . "Ocaml/") ("/usr/share/emacs/" . "site-lisp/") ("/usr/share/" . "emacs/") ("/usr/" . "share/") ("/" . "etc/") ("/Users/" . "tan/") ("/Users/tan/" . ".emacs.d/")))
(setq ido-work-directory-list '("/Users/tan/.emacs.d/lisp/" "/Users/tan/.emacs.d/" "/Users/tan/GitHub/ppl2015/" "/Users/tan/GitHub/ppl001/" "/Users/tan/GitHub/ppl2015_test/" "/Users/tan/GitHub/PLDI-abstract/" "/Users/tan/GitHub/hello-world/" "/Users/tan/Desktop/" "/Users/tan/GitHub/spin/" "/Users/tan/Apts/CPAchecker/" "/Users/tan/Test/cpachecker/" "/Users/tan/Desktop/prs/2014-11-19/ex/" "/Users/tan/Test/tapas/" "/Users/tan/Test/spin/" "/Users/tan/Apts/CPAchecker/output/" "/Users/tan/GitHub/presentation/safe-memory-20141008/" "/Users/tan/GitHub/presentation/safe-memory-20140728/" "/Users/tan/Test/testforOcaml/" "/Users/tan/Documents/Developing-with-Ocaml/Chapters/" "/Users/tan/Spin/Examples/" "/Users/tan/" "/etc/" "/Users/tan/Music/sss/" "/Users/tan/docs/presentation/safe memory20140421/" "/System/Library/LaunchDaemons/" "/Users/tan/Test/testforC/" "/Users/tan/.emacs.d/tuareg-mode/" "/Users/tan/Test/latex/" "/Users/tan/Test/beamer/" "/Users/tan/Test/latex-presentation/" "/Users/tan/docs/presentation/" "/Users/tan/GitHub/test/" "/Users/tan/GitHub/test2/test/" "/Users/tan/GitHub/test2/testgit/" "/Users/tan/GitHub/test3/testgit/" "/Users/tan/GitHub/testgit/" "/Users/tan/GitHub/testgit/.git/" "/Users/tan/GitHub/.emacs.d/.git/" "/Users/tan/Test/testbeamer/" "/Users/tan/GitHub/TestGit/" "/Users/tan/Documents/" "/Users/tan/Test/Org/" "/Users/tan/_emacs/" "/Users/tan/Programs/Ocaml/" "/Users/tan/Programs/min-caml-master/" "/Users/tan/Test/" "/Users/tan/tuareg-mode/" "/usr/share/emacs/site-lisp/" "/Users/tan/Unixstaff/" "/Users/tan/Google ‘ÔÆ‘¶Ë‘Ó²‘ÅÌ/"))
(setq ido-work-file-list '("init-local.el" "init.el" "ppl2015-tanki.tex" "file2" "file1" "custom.el" "jssst_ppl.cls" "template.tex" "sigplanconf.cls" "tan.bib"))
(setq minibuffer-history '("/*" "16" "Chinese-GB18030"))
(setq query-replace-history nil)
(setq read-expression-history nil)
(setq regexp-history nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . "")))
(setq search-ring '("font" "abbr" "biblio" "pid" "ifnull" "proof of lemma " "Type S" "Sub" "Semantics of " "mydef" "sem" "observation" "ls" "column"))
(setq shell-command-history '("/usr/local/bin/ocaml" "q!" "shell" "package-list-packages"))
(setq tags-file-name nil)
(setq tags-table-list nil)

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 206
  "/Users/tan/GitHub/ppl2015/ppl2015-tanki.tex"
  "ppl2015-tanki.tex"
  'latex-mode
  '(anzu-mode global-auto-revert-mode whitespace-cleanup-mode undo-tree-mode whole-line-or-region-mode hes-mode guide-key-mode auto-compile-on-load-mode linum-mode flycheck-mode)
  42361
  '(42064 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-file-coding-system . undecided-unix) (overwrite-mode)))

